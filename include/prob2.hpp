/*!
 * @brief Solution for Problem 2 : Even Fibonacci numbers
 * @author Sarv Parteek Singh
 * @date July-12-2020
 * @details Each new term in the Fibonacci sequence is generated by adding the previous two terms. By starting with 1
 *          and 2, the first 10 terms will be:
 *          1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...
 *          By considering the terms in the Fibonacci sequence whose values do not exceed four million, find the sum of
 *          the even-valued terms.
 */

#ifndef PROJECTEULER_PROB2_HPP
#define PROJECTEULER_PROB2_HPP

#include <stdint.h> // for uint32_t, uint64_t
#include <cassert> // for assert
#include <iostream> // for cout, during testing

/*!
 * @brief Finds the sum of even numbers in a Fibonacci series where each number is <= input limit
 * @param[in] limit Upper bound for Fibonacci series numbers under consideration
 * @return Sum of even Fibonacci numbers
 */
uint64_t evenFibanacciSum(uint32_t const &limit)
{
    uint64_t sum = 0;
    uint32_t t1  = 0; // term 1
    uint32_t t2  = 1; // term 2
    while (t2 <= limit)
    {
        /*
         * 2 terms are given: t1, t2. Calculate a 3rd term as t1 + t2, and shift t1, t2 to the right. That is,
         * if we start with t1, t2 = 0, 1. Then, after this process, t1, t2 = 1, 2
         * */
        auto temp = t2;
        t2        = t1 + t2;
        t1        = temp;
        if (t2 % 2 == 0)
        {
            sum += t2;
        }
    }
    return sum;
}

void testProblem2()
{
   assert(evenFibanacciSum(4E6) == 4613732);
}

#endif //PROJECTEULER_PROB2_HPP
